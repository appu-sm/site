{"version":3,"sources":["logo.svg","components/Investments.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Investments","props","state","columns","title","field","type","initialEditValue","data","id","name","amount","date","parentId","options","headerStyle","backgroundColor","color","actionsColumnIndex","this","parentChildData","row","rows","find","a","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","length","push","setState","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","React","Component","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.561da319.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\n\r\nclass Investments extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns: [\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Type', field: 'type' },\r\n                { title: 'Amount', field: 'amount', type: 'numeric', initialEditValue: '0' },\r\n                { title: 'Date Invested', field: 'date' },\r\n            ],\r\n            data: [\r\n                { id: 1, name: 'Stocks', type: 'Stocks', amount: '150000', date: '22-01-2020' },\r\n                { id: 2, name: 'Mutual Fund', type: 'Mutual Fund', amount: '250000', date: '20-05-2019' },\r\n                { id: 3, name: 'Elss', type: 'Mutual Fund', amount: '250000', date: '20-05-2019', parentId: 2 },\r\n                { id: 4, name: 'Large Cap', type: 'Mutual Fund', amount: '250000', date: '20-05-2019', parentId: 2 },\r\n                { id: 5, name: 'Gold Bond', type: 'Gold Bond', amount: '37380', date: '15-10-2019' },\r\n                { id: 6, name: 'Sopra Steria', type: 'Stocks', amount: '131000', date: '20-05-2019', parentId: 1 },\r\n            ],\r\n            options:{\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                },\r\n                actionsColumnIndex: 4,\r\n                //selection: true\r\n                //grouping: true\r\n            },\r\n        }\r\n    }\r\n  \r\n    render() {\r\n        return (\r\n            <MaterialTable\r\n                title=\"Editable Preview\"\r\n                columns={this.state.columns}\r\n                data={[...this.state.data]}\r\n                parentChildData={(row, rows) => rows.find(a => a.id === row.parentId)}\r\n                options={this.state.options}\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                {\r\n                                    const data = this.state.data;\r\n                                    newData.id = (data.length) + 1;\r\n                                    data.push(newData);\r\n                                    this.setState({ data }, () => resolve());\r\n                                }\r\n                                resolve()\r\n                            }, 1000)\r\n                        }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                {\r\n                                    const data = this.state.data;\r\n                                    const index = data.indexOf(oldData);\r\n                                    data[index] = newData;\r\n                                    this.setState({ data }, () => resolve());\r\n                                }\r\n                                resolve()\r\n                            }, 1000)\r\n                        }),\r\n                    onRowDelete: oldData =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                {\r\n                                    let data = this.state.data;\r\n                                    const index = data.indexOf(oldData);\r\n                                    data.splice(index, 1);\r\n                                    this.setState({ data }, () => resolve());\r\n                                }\r\n                                resolve()\r\n                            }, 1000)\r\n                        }),\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Investments","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Investment from './components/Investments'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Investment />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}