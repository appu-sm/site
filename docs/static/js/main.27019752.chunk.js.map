{"version":3,"sources":["firebase.js","components/Investments.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Investments","props","state","columns","title","field","type","initialEditValue","data","options","headerStyle","backgroundColor","color","actionsColumnIndex","database","ref","on","snapshot","items","val","newState","item","console","log","push","fid","Object","keys","id","name","amount","date","setState","this","parentChildData","row","rows","find","a","parentId","editable","onRowAdd","newData","Promise","resolve","reject","setTimeout","length","onRowUpdate","oldData","index","indexOf","onRowDelete","splice","remove","React","Component","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27019752.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDt8r9dlFoPAMbLQzbQKau5brq8wWgcoBY\",\r\n    authDomain: \"appu-sm.firebaseapp.com\",\r\n    databaseURL: \"https://appu-sm.firebaseio.com\",\r\n    projectId: \"appu-sm\",\r\n    storageBucket: \"appu-sm.appspot.com\",\r\n    messagingSenderId: \"96640527924\",\r\n    appId: \"1:96640527924:web:3065eab46dbdd6c145e461\",\r\n    measurementId: \"G-7HS9ZT1M2C\"\r\n  };\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport firebase from '../firebase';\r\n\r\nclass Investments extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            columns: [\r\n                { title: 'Name', field: 'name' },\r\n                { title: 'Type', field: 'type' },\r\n                { title: 'Amount', field: 'amount', type: 'numeric', initialEditValue: '0' },\r\n                { title: 'Date Invested', field: 'date' },\r\n            ],\r\n            data: [],\r\n            options:{\r\n                headerStyle: {\r\n                    backgroundColor: '#01579b',\r\n                    color: '#FFF'\r\n                },\r\n                actionsColumnIndex: 4,\r\n                //selection: true\r\n                //grouping: true\r\n            },\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const itemsRef = firebase.database().ref('investments');\r\n        itemsRef.on('value', (snapshot) => {\r\n            let items = snapshot.val();\r\n            let newState = [];\r\n            console.log(items);\r\n            for(let item in items){\r\n                newState.push({\r\n                    fid: Object.keys(items)[0],\r\n                    id: items[item].id,\r\n                    name: items[item].name,\r\n                    type: items[item].type, \r\n                    amount: items[item].amount, \r\n                    date: items[item].date\r\n                })\r\n            }\r\n            this.setState({\r\n                data: newState\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MaterialTable\r\n                title=\"Editable Preview\"\r\n                columns={this.state.columns}\r\n                data={[...this.state.data]}\r\n                parentChildData={(row, rows) => rows.find(a => a.id === row.parentId)}\r\n                options={this.state.options}\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                {\r\n                                    const data = this.state.data;\r\n                                    newData.id = (data.length) + 1;\r\n                                    const itemsRef = firebase.database().ref('investments');\r\n                                    itemsRef.push(newData);\r\n                                    data.push(newData);\r\n                                    this.setState({ data }, () => resolve());\r\n                                }\r\n                                resolve()\r\n                            }, 1000)\r\n                        }),\r\n                    onRowUpdate: (newData, oldData) =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                {\r\n                                    const data = this.state.data;\r\n                                    const index = data.indexOf(oldData);\r\n                                    data[index] = newData;\r\n                                    this.setState({ data }, () => resolve());\r\n                                }\r\n                                resolve()\r\n                            }, 1000)\r\n                        }),\r\n                    onRowDelete: oldData =>\r\n                        new Promise((resolve, reject) => {\r\n                            setTimeout(() => {\r\n                                {\r\n                                    let data = this.state.data;\r\n                                    const index = data.indexOf(oldData);\r\n                                    data.splice(index, 1);\r\n                                    this.setState({ data }, () => resolve());\r\n\r\n                                    const itemRef = firebase.database().ref(`/investments/${oldData.fid}`);\r\n                                    itemRef.remove();\r\n                                }\r\n                                resolve()\r\n                            }, 1000)\r\n                        }),\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Investments;","import React from 'react';\nimport './App.css';\nimport Investment from './components/Investments';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Investment />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}